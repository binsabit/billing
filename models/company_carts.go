// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompanyCart is an object representing the database table.
type CompanyCart struct {
	ID         int64           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID  int64           `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	SenderType int16           `boil:"sender_type" json:"sender_type" toml:"sender_type" yaml:"sender_type"`
	SenderID   null.Int64      `boil:"sender_id" json:"sender_id,omitempty" toml:"sender_id" yaml:"sender_id,omitempty"`
	ProviderID int16           `boil:"provider_id" json:"provider_id" toml:"provider_id" yaml:"provider_id"`
	Status     int16           `boil:"status" json:"status" toml:"status" yaml:"status"`
	Sum        decimal.Decimal `boil:"sum" json:"sum" toml:"sum" yaml:"sum"`
	PaidAt     time.Time       `boil:"paid_at" json:"paid_at" toml:"paid_at" yaml:"paid_at"`

	R *companyCartR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L companyCartL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompanyCartColumns = struct {
	ID         string
	CompanyID  string
	SenderType string
	SenderID   string
	ProviderID string
	Status     string
	Sum        string
	PaidAt     string
}{
	ID:         "id",
	CompanyID:  "company_id",
	SenderType: "sender_type",
	SenderID:   "sender_id",
	ProviderID: "provider_id",
	Status:     "status",
	Sum:        "sum",
	PaidAt:     "paid_at",
}

var CompanyCartTableColumns = struct {
	ID         string
	CompanyID  string
	SenderType string
	SenderID   string
	ProviderID string
	Status     string
	Sum        string
	PaidAt     string
}{
	ID:         "company_carts.id",
	CompanyID:  "company_carts.company_id",
	SenderType: "company_carts.sender_type",
	SenderID:   "company_carts.sender_id",
	ProviderID: "company_carts.provider_id",
	Status:     "company_carts.status",
	Sum:        "company_carts.sum",
	PaidAt:     "company_carts.paid_at",
}

// Generated where

var CompanyCartWhere = struct {
	ID         whereHelperint64
	CompanyID  whereHelperint64
	SenderType whereHelperint16
	SenderID   whereHelpernull_Int64
	ProviderID whereHelperint16
	Status     whereHelperint16
	Sum        whereHelperdecimal_Decimal
	PaidAt     whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "`company_carts`.`id`"},
	CompanyID:  whereHelperint64{field: "`company_carts`.`company_id`"},
	SenderType: whereHelperint16{field: "`company_carts`.`sender_type`"},
	SenderID:   whereHelpernull_Int64{field: "`company_carts`.`sender_id`"},
	ProviderID: whereHelperint16{field: "`company_carts`.`provider_id`"},
	Status:     whereHelperint16{field: "`company_carts`.`status`"},
	Sum:        whereHelperdecimal_Decimal{field: "`company_carts`.`sum`"},
	PaidAt:     whereHelpertime_Time{field: "`company_carts`.`paid_at`"},
}

// CompanyCartRels is where relationship names are stored.
var CompanyCartRels = struct {
	CompanyCartServices string
}{
	CompanyCartServices: "CompanyCartServices",
}

// companyCartR is where relationships are stored.
type companyCartR struct {
	CompanyCartServices CompanyCartServiceSlice `boil:"CompanyCartServices" json:"CompanyCartServices" toml:"CompanyCartServices" yaml:"CompanyCartServices"`
}

// NewStruct creates a new relationship struct
func (*companyCartR) NewStruct() *companyCartR {
	return &companyCartR{}
}

func (r *companyCartR) GetCompanyCartServices() CompanyCartServiceSlice {
	if r == nil {
		return nil
	}
	return r.CompanyCartServices
}

// companyCartL is where Load methods for each relationship are stored.
type companyCartL struct{}

var (
	companyCartAllColumns            = []string{"id", "company_id", "sender_type", "sender_id", "provider_id", "status", "sum", "paid_at"}
	companyCartColumnsWithoutDefault = []string{"company_id", "sender_type", "sender_id", "provider_id", "status"}
	companyCartColumnsWithDefault    = []string{"id", "sum", "paid_at"}
	companyCartPrimaryKeyColumns     = []string{"id"}
	companyCartGeneratedColumns      = []string{}
)

type (
	// CompanyCartSlice is an alias for a slice of pointers to CompanyCart.
	// This should almost always be used instead of []CompanyCart.
	CompanyCartSlice []*CompanyCart
	// CompanyCartHook is the signature for custom CompanyCart hook methods
	CompanyCartHook func(context.Context, boil.ContextExecutor, *CompanyCart) error

	companyCartQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	companyCartType                 = reflect.TypeOf(&CompanyCart{})
	companyCartMapping              = queries.MakeStructMapping(companyCartType)
	companyCartPrimaryKeyMapping, _ = queries.BindMapping(companyCartType, companyCartMapping, companyCartPrimaryKeyColumns)
	companyCartInsertCacheMut       sync.RWMutex
	companyCartInsertCache          = make(map[string]insertCache)
	companyCartUpdateCacheMut       sync.RWMutex
	companyCartUpdateCache          = make(map[string]updateCache)
	companyCartUpsertCacheMut       sync.RWMutex
	companyCartUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var companyCartAfterSelectHooks []CompanyCartHook

var companyCartBeforeInsertHooks []CompanyCartHook
var companyCartAfterInsertHooks []CompanyCartHook

var companyCartBeforeUpdateHooks []CompanyCartHook
var companyCartAfterUpdateHooks []CompanyCartHook

var companyCartBeforeDeleteHooks []CompanyCartHook
var companyCartAfterDeleteHooks []CompanyCartHook

var companyCartBeforeUpsertHooks []CompanyCartHook
var companyCartAfterUpsertHooks []CompanyCartHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CompanyCart) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CompanyCart) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CompanyCart) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CompanyCart) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CompanyCart) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CompanyCart) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CompanyCart) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CompanyCart) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CompanyCart) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompanyCartHook registers your hook function for all future operations.
func AddCompanyCartHook(hookPoint boil.HookPoint, companyCartHook CompanyCartHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		companyCartAfterSelectHooks = append(companyCartAfterSelectHooks, companyCartHook)
	case boil.BeforeInsertHook:
		companyCartBeforeInsertHooks = append(companyCartBeforeInsertHooks, companyCartHook)
	case boil.AfterInsertHook:
		companyCartAfterInsertHooks = append(companyCartAfterInsertHooks, companyCartHook)
	case boil.BeforeUpdateHook:
		companyCartBeforeUpdateHooks = append(companyCartBeforeUpdateHooks, companyCartHook)
	case boil.AfterUpdateHook:
		companyCartAfterUpdateHooks = append(companyCartAfterUpdateHooks, companyCartHook)
	case boil.BeforeDeleteHook:
		companyCartBeforeDeleteHooks = append(companyCartBeforeDeleteHooks, companyCartHook)
	case boil.AfterDeleteHook:
		companyCartAfterDeleteHooks = append(companyCartAfterDeleteHooks, companyCartHook)
	case boil.BeforeUpsertHook:
		companyCartBeforeUpsertHooks = append(companyCartBeforeUpsertHooks, companyCartHook)
	case boil.AfterUpsertHook:
		companyCartAfterUpsertHooks = append(companyCartAfterUpsertHooks, companyCartHook)
	}
}

// One returns a single companyCart record from the query.
func (q companyCartQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompanyCart, error) {
	o := &CompanyCart{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for company_carts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CompanyCart records from the query.
func (q companyCartQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompanyCartSlice, error) {
	var o []*CompanyCart

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CompanyCart slice")
	}

	if len(companyCartAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CompanyCart records in the query.
func (q companyCartQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count company_carts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q companyCartQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if company_carts exists")
	}

	return count > 0, nil
}

// CompanyCartServices retrieves all the company_cart_service's CompanyCartServices with an executor.
func (o *CompanyCart) CompanyCartServices(mods ...qm.QueryMod) companyCartServiceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`company_cart_services`.`company_cart_id`=?", o.ID),
	)

	return CompanyCartServices(queryMods...)
}

// LoadCompanyCartServices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyCartL) LoadCompanyCartServices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompanyCart interface{}, mods queries.Applicator) error {
	var slice []*CompanyCart
	var object *CompanyCart

	if singular {
		var ok bool
		object, ok = maybeCompanyCart.(*CompanyCart)
		if !ok {
			object = new(CompanyCart)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompanyCart)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompanyCart))
			}
		}
	} else {
		s, ok := maybeCompanyCart.(*[]*CompanyCart)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompanyCart)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompanyCart))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyCartR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyCartR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`company_cart_services`),
		qm.WhereIn(`company_cart_services.company_cart_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load company_cart_services")
	}

	var resultSlice []*CompanyCartService
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice company_cart_services")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on company_cart_services")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for company_cart_services")
	}

	if len(companyCartServiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CompanyCartServices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyCartServiceR{}
			}
			foreign.R.CompanyCart = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompanyCartID {
				local.R.CompanyCartServices = append(local.R.CompanyCartServices, foreign)
				if foreign.R == nil {
					foreign.R = &companyCartServiceR{}
				}
				foreign.R.CompanyCart = local
				break
			}
		}
	}

	return nil
}

// AddCompanyCartServices adds the given related objects to the existing relationships
// of the company_cart, optionally inserting them as new records.
// Appends related to o.R.CompanyCartServices.
// Sets related.R.CompanyCart appropriately.
func (o *CompanyCart) AddCompanyCartServices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CompanyCartService) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompanyCartID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `company_cart_services` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"company_cart_id"}),
				strmangle.WhereClause("`", "`", 0, companyCartServicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompanyCartID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyCartR{
			CompanyCartServices: related,
		}
	} else {
		o.R.CompanyCartServices = append(o.R.CompanyCartServices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyCartServiceR{
				CompanyCart: o,
			}
		} else {
			rel.R.CompanyCart = o
		}
	}
	return nil
}

// CompanyCarts retrieves all the records using an executor.
func CompanyCarts(mods ...qm.QueryMod) companyCartQuery {
	mods = append(mods, qm.From("`company_carts`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`company_carts`.*"})
	}

	return companyCartQuery{q}
}

// FindCompanyCart retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompanyCart(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CompanyCart, error) {
	companyCartObj := &CompanyCart{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `company_carts` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, companyCartObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from company_carts")
	}

	if err = companyCartObj.doAfterSelectHooks(ctx, exec); err != nil {
		return companyCartObj, err
	}

	return companyCartObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompanyCart) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no company_carts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companyCartColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	companyCartInsertCacheMut.RLock()
	cache, cached := companyCartInsertCache[key]
	companyCartInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			companyCartAllColumns,
			companyCartColumnsWithDefault,
			companyCartColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(companyCartType, companyCartMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(companyCartType, companyCartMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `company_carts` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `company_carts` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `company_carts` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, companyCartPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into company_carts")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companyCartMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for company_carts")
	}

CacheNoHooks:
	if !cached {
		companyCartInsertCacheMut.Lock()
		companyCartInsertCache[key] = cache
		companyCartInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CompanyCart.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompanyCart) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	companyCartUpdateCacheMut.RLock()
	cache, cached := companyCartUpdateCache[key]
	companyCartUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			companyCartAllColumns,
			companyCartPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update company_carts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `company_carts` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, companyCartPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(companyCartType, companyCartMapping, append(wl, companyCartPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update company_carts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for company_carts")
	}

	if !cached {
		companyCartUpdateCacheMut.Lock()
		companyCartUpdateCache[key] = cache
		companyCartUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q companyCartQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for company_carts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for company_carts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompanyCartSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyCartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `company_carts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyCartPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in companyCart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all companyCart")
	}
	return rowsAff, nil
}

var mySQLCompanyCartUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompanyCart) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no company_carts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companyCartColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCompanyCartUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	companyCartUpsertCacheMut.RLock()
	cache, cached := companyCartUpsertCache[key]
	companyCartUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			companyCartAllColumns,
			companyCartColumnsWithDefault,
			companyCartColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			companyCartAllColumns,
			companyCartPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert company_carts, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`company_carts`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `company_carts` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(companyCartType, companyCartMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(companyCartType, companyCartMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for company_carts")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companyCartMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(companyCartType, companyCartMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for company_carts")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for company_carts")
	}

CacheNoHooks:
	if !cached {
		companyCartUpsertCacheMut.Lock()
		companyCartUpsertCache[key] = cache
		companyCartUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CompanyCart record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompanyCart) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CompanyCart provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), companyCartPrimaryKeyMapping)
	sql := "DELETE FROM `company_carts` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from company_carts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for company_carts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q companyCartQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no companyCartQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from company_carts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for company_carts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompanyCartSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(companyCartBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyCartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `company_carts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyCartPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from companyCart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for company_carts")
	}

	if len(companyCartAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompanyCart) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompanyCart(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompanyCartSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompanyCartSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyCartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `company_carts`.* FROM `company_carts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyCartPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompanyCartSlice")
	}

	*o = slice

	return nil
}

// CompanyCartExists checks if the CompanyCart row exists.
func CompanyCartExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `company_carts` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if company_carts exists")
	}

	return exists, nil
}

// Exists checks if the CompanyCart row exists.
func (o *CompanyCart) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CompanyCartExists(ctx, exec, o.ID)
}
