// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompanyCartService is an object representing the database table.
type CompanyCartService struct {
	ID            int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyCartID int64 `boil:"company_cart_id" json:"company_cart_id" toml:"company_cart_id" yaml:"company_cart_id"`
	ServiceID     int64 `boil:"service_id" json:"service_id" toml:"service_id" yaml:"service_id"`

	R *companyCartServiceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L companyCartServiceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompanyCartServiceColumns = struct {
	ID            string
	CompanyCartID string
	ServiceID     string
}{
	ID:            "id",
	CompanyCartID: "company_cart_id",
	ServiceID:     "service_id",
}

var CompanyCartServiceTableColumns = struct {
	ID            string
	CompanyCartID string
	ServiceID     string
}{
	ID:            "company_cart_services.id",
	CompanyCartID: "company_cart_services.company_cart_id",
	ServiceID:     "company_cart_services.service_id",
}

// Generated where

var CompanyCartServiceWhere = struct {
	ID            whereHelperint64
	CompanyCartID whereHelperint64
	ServiceID     whereHelperint64
}{
	ID:            whereHelperint64{field: "`company_cart_services`.`id`"},
	CompanyCartID: whereHelperint64{field: "`company_cart_services`.`company_cart_id`"},
	ServiceID:     whereHelperint64{field: "`company_cart_services`.`service_id`"},
}

// CompanyCartServiceRels is where relationship names are stored.
var CompanyCartServiceRels = struct {
	CompanyCart string
	Service     string
}{
	CompanyCart: "CompanyCart",
	Service:     "Service",
}

// companyCartServiceR is where relationships are stored.
type companyCartServiceR struct {
	CompanyCart *CompanyCart `boil:"CompanyCart" json:"CompanyCart" toml:"CompanyCart" yaml:"CompanyCart"`
	Service     *Service     `boil:"Service" json:"Service" toml:"Service" yaml:"Service"`
}

// NewStruct creates a new relationship struct
func (*companyCartServiceR) NewStruct() *companyCartServiceR {
	return &companyCartServiceR{}
}

func (r *companyCartServiceR) GetCompanyCart() *CompanyCart {
	if r == nil {
		return nil
	}
	return r.CompanyCart
}

func (r *companyCartServiceR) GetService() *Service {
	if r == nil {
		return nil
	}
	return r.Service
}

// companyCartServiceL is where Load methods for each relationship are stored.
type companyCartServiceL struct{}

var (
	companyCartServiceAllColumns            = []string{"id", "company_cart_id", "service_id"}
	companyCartServiceColumnsWithoutDefault = []string{"company_cart_id", "service_id"}
	companyCartServiceColumnsWithDefault    = []string{"id"}
	companyCartServicePrimaryKeyColumns     = []string{"id"}
	companyCartServiceGeneratedColumns      = []string{}
)

type (
	// CompanyCartServiceSlice is an alias for a slice of pointers to CompanyCartService.
	// This should almost always be used instead of []CompanyCartService.
	CompanyCartServiceSlice []*CompanyCartService
	// CompanyCartServiceHook is the signature for custom CompanyCartService hook methods
	CompanyCartServiceHook func(context.Context, boil.ContextExecutor, *CompanyCartService) error

	companyCartServiceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	companyCartServiceType                 = reflect.TypeOf(&CompanyCartService{})
	companyCartServiceMapping              = queries.MakeStructMapping(companyCartServiceType)
	companyCartServicePrimaryKeyMapping, _ = queries.BindMapping(companyCartServiceType, companyCartServiceMapping, companyCartServicePrimaryKeyColumns)
	companyCartServiceInsertCacheMut       sync.RWMutex
	companyCartServiceInsertCache          = make(map[string]insertCache)
	companyCartServiceUpdateCacheMut       sync.RWMutex
	companyCartServiceUpdateCache          = make(map[string]updateCache)
	companyCartServiceUpsertCacheMut       sync.RWMutex
	companyCartServiceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var companyCartServiceAfterSelectHooks []CompanyCartServiceHook

var companyCartServiceBeforeInsertHooks []CompanyCartServiceHook
var companyCartServiceAfterInsertHooks []CompanyCartServiceHook

var companyCartServiceBeforeUpdateHooks []CompanyCartServiceHook
var companyCartServiceAfterUpdateHooks []CompanyCartServiceHook

var companyCartServiceBeforeDeleteHooks []CompanyCartServiceHook
var companyCartServiceAfterDeleteHooks []CompanyCartServiceHook

var companyCartServiceBeforeUpsertHooks []CompanyCartServiceHook
var companyCartServiceAfterUpsertHooks []CompanyCartServiceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CompanyCartService) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartServiceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CompanyCartService) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartServiceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CompanyCartService) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartServiceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CompanyCartService) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartServiceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CompanyCartService) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartServiceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CompanyCartService) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartServiceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CompanyCartService) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartServiceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CompanyCartService) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartServiceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CompanyCartService) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyCartServiceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompanyCartServiceHook registers your hook function for all future operations.
func AddCompanyCartServiceHook(hookPoint boil.HookPoint, companyCartServiceHook CompanyCartServiceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		companyCartServiceAfterSelectHooks = append(companyCartServiceAfterSelectHooks, companyCartServiceHook)
	case boil.BeforeInsertHook:
		companyCartServiceBeforeInsertHooks = append(companyCartServiceBeforeInsertHooks, companyCartServiceHook)
	case boil.AfterInsertHook:
		companyCartServiceAfterInsertHooks = append(companyCartServiceAfterInsertHooks, companyCartServiceHook)
	case boil.BeforeUpdateHook:
		companyCartServiceBeforeUpdateHooks = append(companyCartServiceBeforeUpdateHooks, companyCartServiceHook)
	case boil.AfterUpdateHook:
		companyCartServiceAfterUpdateHooks = append(companyCartServiceAfterUpdateHooks, companyCartServiceHook)
	case boil.BeforeDeleteHook:
		companyCartServiceBeforeDeleteHooks = append(companyCartServiceBeforeDeleteHooks, companyCartServiceHook)
	case boil.AfterDeleteHook:
		companyCartServiceAfterDeleteHooks = append(companyCartServiceAfterDeleteHooks, companyCartServiceHook)
	case boil.BeforeUpsertHook:
		companyCartServiceBeforeUpsertHooks = append(companyCartServiceBeforeUpsertHooks, companyCartServiceHook)
	case boil.AfterUpsertHook:
		companyCartServiceAfterUpsertHooks = append(companyCartServiceAfterUpsertHooks, companyCartServiceHook)
	}
}

// One returns a single companyCartService record from the query.
func (q companyCartServiceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompanyCartService, error) {
	o := &CompanyCartService{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for company_cart_services")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CompanyCartService records from the query.
func (q companyCartServiceQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompanyCartServiceSlice, error) {
	var o []*CompanyCartService

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CompanyCartService slice")
	}

	if len(companyCartServiceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CompanyCartService records in the query.
func (q companyCartServiceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count company_cart_services rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q companyCartServiceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if company_cart_services exists")
	}

	return count > 0, nil
}

// CompanyCart pointed to by the foreign key.
func (o *CompanyCartService) CompanyCart(mods ...qm.QueryMod) companyCartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CompanyCartID),
	}

	queryMods = append(queryMods, mods...)

	return CompanyCarts(queryMods...)
}

// Service pointed to by the foreign key.
func (o *CompanyCartService) Service(mods ...qm.QueryMod) serviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ServiceID),
	}

	queryMods = append(queryMods, mods...)

	return Services(queryMods...)
}

// LoadCompanyCart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyCartServiceL) LoadCompanyCart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompanyCartService interface{}, mods queries.Applicator) error {
	var slice []*CompanyCartService
	var object *CompanyCartService

	if singular {
		var ok bool
		object, ok = maybeCompanyCartService.(*CompanyCartService)
		if !ok {
			object = new(CompanyCartService)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompanyCartService)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompanyCartService))
			}
		}
	} else {
		s, ok := maybeCompanyCartService.(*[]*CompanyCartService)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompanyCartService)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompanyCartService))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyCartServiceR{}
		}
		args = append(args, object.CompanyCartID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyCartServiceR{}
			}

			for _, a := range args {
				if a == obj.CompanyCartID {
					continue Outer
				}
			}

			args = append(args, obj.CompanyCartID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`company_carts`),
		qm.WhereIn(`company_carts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CompanyCart")
	}

	var resultSlice []*CompanyCart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CompanyCart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for company_carts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for company_carts")
	}

	if len(companyCartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CompanyCart = foreign
		if foreign.R == nil {
			foreign.R = &companyCartR{}
		}
		foreign.R.CompanyCartServices = append(foreign.R.CompanyCartServices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CompanyCartID == foreign.ID {
				local.R.CompanyCart = foreign
				if foreign.R == nil {
					foreign.R = &companyCartR{}
				}
				foreign.R.CompanyCartServices = append(foreign.R.CompanyCartServices, local)
				break
			}
		}
	}

	return nil
}

// LoadService allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyCartServiceL) LoadService(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompanyCartService interface{}, mods queries.Applicator) error {
	var slice []*CompanyCartService
	var object *CompanyCartService

	if singular {
		var ok bool
		object, ok = maybeCompanyCartService.(*CompanyCartService)
		if !ok {
			object = new(CompanyCartService)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompanyCartService)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompanyCartService))
			}
		}
	} else {
		s, ok := maybeCompanyCartService.(*[]*CompanyCartService)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompanyCartService)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompanyCartService))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyCartServiceR{}
		}
		args = append(args, object.ServiceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyCartServiceR{}
			}

			for _, a := range args {
				if a == obj.ServiceID {
					continue Outer
				}
			}

			args = append(args, obj.ServiceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`services`),
		qm.WhereIn(`services.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Service")
	}

	var resultSlice []*Service
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Service")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for services")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for services")
	}

	if len(serviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Service = foreign
		if foreign.R == nil {
			foreign.R = &serviceR{}
		}
		foreign.R.CompanyCartServices = append(foreign.R.CompanyCartServices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceID == foreign.ID {
				local.R.Service = foreign
				if foreign.R == nil {
					foreign.R = &serviceR{}
				}
				foreign.R.CompanyCartServices = append(foreign.R.CompanyCartServices, local)
				break
			}
		}
	}

	return nil
}

// SetCompanyCart of the companyCartService to the related item.
// Sets o.R.CompanyCart to related.
// Adds o to related.R.CompanyCartServices.
func (o *CompanyCartService) SetCompanyCart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CompanyCart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `company_cart_services` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"company_cart_id"}),
		strmangle.WhereClause("`", "`", 0, companyCartServicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CompanyCartID = related.ID
	if o.R == nil {
		o.R = &companyCartServiceR{
			CompanyCart: related,
		}
	} else {
		o.R.CompanyCart = related
	}

	if related.R == nil {
		related.R = &companyCartR{
			CompanyCartServices: CompanyCartServiceSlice{o},
		}
	} else {
		related.R.CompanyCartServices = append(related.R.CompanyCartServices, o)
	}

	return nil
}

// SetService of the companyCartService to the related item.
// Sets o.R.Service to related.
// Adds o to related.R.CompanyCartServices.
func (o *CompanyCartService) SetService(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Service) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `company_cart_services` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"service_id"}),
		strmangle.WhereClause("`", "`", 0, companyCartServicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceID = related.ID
	if o.R == nil {
		o.R = &companyCartServiceR{
			Service: related,
		}
	} else {
		o.R.Service = related
	}

	if related.R == nil {
		related.R = &serviceR{
			CompanyCartServices: CompanyCartServiceSlice{o},
		}
	} else {
		related.R.CompanyCartServices = append(related.R.CompanyCartServices, o)
	}

	return nil
}

// CompanyCartServices retrieves all the records using an executor.
func CompanyCartServices(mods ...qm.QueryMod) companyCartServiceQuery {
	mods = append(mods, qm.From("`company_cart_services`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`company_cart_services`.*"})
	}

	return companyCartServiceQuery{q}
}

// FindCompanyCartService retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompanyCartService(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CompanyCartService, error) {
	companyCartServiceObj := &CompanyCartService{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `company_cart_services` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, companyCartServiceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from company_cart_services")
	}

	if err = companyCartServiceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return companyCartServiceObj, err
	}

	return companyCartServiceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompanyCartService) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no company_cart_services provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companyCartServiceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	companyCartServiceInsertCacheMut.RLock()
	cache, cached := companyCartServiceInsertCache[key]
	companyCartServiceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			companyCartServiceAllColumns,
			companyCartServiceColumnsWithDefault,
			companyCartServiceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(companyCartServiceType, companyCartServiceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(companyCartServiceType, companyCartServiceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `company_cart_services` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `company_cart_services` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `company_cart_services` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, companyCartServicePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into company_cart_services")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companyCartServiceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for company_cart_services")
	}

CacheNoHooks:
	if !cached {
		companyCartServiceInsertCacheMut.Lock()
		companyCartServiceInsertCache[key] = cache
		companyCartServiceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CompanyCartService.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompanyCartService) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	companyCartServiceUpdateCacheMut.RLock()
	cache, cached := companyCartServiceUpdateCache[key]
	companyCartServiceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			companyCartServiceAllColumns,
			companyCartServicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update company_cart_services, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `company_cart_services` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, companyCartServicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(companyCartServiceType, companyCartServiceMapping, append(wl, companyCartServicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update company_cart_services row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for company_cart_services")
	}

	if !cached {
		companyCartServiceUpdateCacheMut.Lock()
		companyCartServiceUpdateCache[key] = cache
		companyCartServiceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q companyCartServiceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for company_cart_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for company_cart_services")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompanyCartServiceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyCartServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `company_cart_services` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyCartServicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in companyCartService slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all companyCartService")
	}
	return rowsAff, nil
}

var mySQLCompanyCartServiceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompanyCartService) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no company_cart_services provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companyCartServiceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCompanyCartServiceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	companyCartServiceUpsertCacheMut.RLock()
	cache, cached := companyCartServiceUpsertCache[key]
	companyCartServiceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			companyCartServiceAllColumns,
			companyCartServiceColumnsWithDefault,
			companyCartServiceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			companyCartServiceAllColumns,
			companyCartServicePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert company_cart_services, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`company_cart_services`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `company_cart_services` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(companyCartServiceType, companyCartServiceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(companyCartServiceType, companyCartServiceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for company_cart_services")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companyCartServiceMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(companyCartServiceType, companyCartServiceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for company_cart_services")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for company_cart_services")
	}

CacheNoHooks:
	if !cached {
		companyCartServiceUpsertCacheMut.Lock()
		companyCartServiceUpsertCache[key] = cache
		companyCartServiceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CompanyCartService record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompanyCartService) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CompanyCartService provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), companyCartServicePrimaryKeyMapping)
	sql := "DELETE FROM `company_cart_services` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from company_cart_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for company_cart_services")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q companyCartServiceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no companyCartServiceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from company_cart_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for company_cart_services")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompanyCartServiceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(companyCartServiceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyCartServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `company_cart_services` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyCartServicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from companyCartService slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for company_cart_services")
	}

	if len(companyCartServiceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompanyCartService) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompanyCartService(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompanyCartServiceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompanyCartServiceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyCartServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `company_cart_services`.* FROM `company_cart_services` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyCartServicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompanyCartServiceSlice")
	}

	*o = slice

	return nil
}

// CompanyCartServiceExists checks if the CompanyCartService row exists.
func CompanyCartServiceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `company_cart_services` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if company_cart_services exists")
	}

	return exists, nil
}

// Exists checks if the CompanyCartService row exists.
func (o *CompanyCartService) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CompanyCartServiceExists(ctx, exec, o.ID)
}
