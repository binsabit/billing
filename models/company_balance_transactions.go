// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompanyBalanceTransaction is an object representing the database table.
type CompanyBalanceTransaction struct {
	ID         int64           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID  int64           `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	Type       int             `boil:"type" json:"type" toml:"type" yaml:"type"`
	Amount     decimal.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Data       null.JSON       `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`
	SenderType int16           `boil:"sender_type" json:"sender_type" toml:"sender_type" yaml:"sender_type"`
	SenderID   null.Int64      `boil:"sender_id" json:"sender_id,omitempty" toml:"sender_id" yaml:"sender_id,omitempty"`
	ProviderID int16           `boil:"provider_id" json:"provider_id" toml:"provider_id" yaml:"provider_id"`
	Status     int16           `boil:"status" json:"status" toml:"status" yaml:"status"`
	IsInit     bool            `boil:"is_init" json:"is_init" toml:"is_init" yaml:"is_init"`
	PaidAt     time.Time       `boil:"paid_at" json:"paid_at" toml:"paid_at" yaml:"paid_at"`

	R *companyBalanceTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L companyBalanceTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompanyBalanceTransactionColumns = struct {
	ID         string
	CompanyID  string
	Type       string
	Amount     string
	Data       string
	SenderType string
	SenderID   string
	ProviderID string
	Status     string
	IsInit     string
	PaidAt     string
}{
	ID:         "id",
	CompanyID:  "company_id",
	Type:       "type",
	Amount:     "amount",
	Data:       "data",
	SenderType: "sender_type",
	SenderID:   "sender_id",
	ProviderID: "provider_id",
	Status:     "status",
	IsInit:     "is_init",
	PaidAt:     "paid_at",
}

var CompanyBalanceTransactionTableColumns = struct {
	ID         string
	CompanyID  string
	Type       string
	Amount     string
	Data       string
	SenderType string
	SenderID   string
	ProviderID string
	Status     string
	IsInit     string
	PaidAt     string
}{
	ID:         "company_balance_transactions.id",
	CompanyID:  "company_balance_transactions.company_id",
	Type:       "company_balance_transactions.type",
	Amount:     "company_balance_transactions.amount",
	Data:       "company_balance_transactions.data",
	SenderType: "company_balance_transactions.sender_type",
	SenderID:   "company_balance_transactions.sender_id",
	ProviderID: "company_balance_transactions.provider_id",
	Status:     "company_balance_transactions.status",
	IsInit:     "company_balance_transactions.is_init",
	PaidAt:     "company_balance_transactions.paid_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperdecimal_Decimal struct{ field string }

func (w whereHelperdecimal_Decimal) EQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdecimal_Decimal) NEQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdecimal_Decimal) LT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_Decimal) LTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_Decimal) GT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_Decimal) GTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CompanyBalanceTransactionWhere = struct {
	ID         whereHelperint64
	CompanyID  whereHelperint64
	Type       whereHelperint
	Amount     whereHelperdecimal_Decimal
	Data       whereHelpernull_JSON
	SenderType whereHelperint16
	SenderID   whereHelpernull_Int64
	ProviderID whereHelperint16
	Status     whereHelperint16
	IsInit     whereHelperbool
	PaidAt     whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "`company_balance_transactions`.`id`"},
	CompanyID:  whereHelperint64{field: "`company_balance_transactions`.`company_id`"},
	Type:       whereHelperint{field: "`company_balance_transactions`.`type`"},
	Amount:     whereHelperdecimal_Decimal{field: "`company_balance_transactions`.`amount`"},
	Data:       whereHelpernull_JSON{field: "`company_balance_transactions`.`data`"},
	SenderType: whereHelperint16{field: "`company_balance_transactions`.`sender_type`"},
	SenderID:   whereHelpernull_Int64{field: "`company_balance_transactions`.`sender_id`"},
	ProviderID: whereHelperint16{field: "`company_balance_transactions`.`provider_id`"},
	Status:     whereHelperint16{field: "`company_balance_transactions`.`status`"},
	IsInit:     whereHelperbool{field: "`company_balance_transactions`.`is_init`"},
	PaidAt:     whereHelpertime_Time{field: "`company_balance_transactions`.`paid_at`"},
}

// CompanyBalanceTransactionRels is where relationship names are stored.
var CompanyBalanceTransactionRels = struct {
}{}

// companyBalanceTransactionR is where relationships are stored.
type companyBalanceTransactionR struct {
}

// NewStruct creates a new relationship struct
func (*companyBalanceTransactionR) NewStruct() *companyBalanceTransactionR {
	return &companyBalanceTransactionR{}
}

// companyBalanceTransactionL is where Load methods for each relationship are stored.
type companyBalanceTransactionL struct{}

var (
	companyBalanceTransactionAllColumns            = []string{"id", "company_id", "type", "amount", "data", "sender_type", "sender_id", "provider_id", "status", "is_init", "paid_at"}
	companyBalanceTransactionColumnsWithoutDefault = []string{"company_id", "type", "data", "sender_type", "sender_id", "provider_id", "status"}
	companyBalanceTransactionColumnsWithDefault    = []string{"id", "amount", "is_init", "paid_at"}
	companyBalanceTransactionPrimaryKeyColumns     = []string{"id"}
	companyBalanceTransactionGeneratedColumns      = []string{}
)

type (
	// CompanyBalanceTransactionSlice is an alias for a slice of pointers to CompanyBalanceTransaction.
	// This should almost always be used instead of []CompanyBalanceTransaction.
	CompanyBalanceTransactionSlice []*CompanyBalanceTransaction
	// CompanyBalanceTransactionHook is the signature for custom CompanyBalanceTransaction hook methods
	CompanyBalanceTransactionHook func(context.Context, boil.ContextExecutor, *CompanyBalanceTransaction) error

	companyBalanceTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	companyBalanceTransactionType                 = reflect.TypeOf(&CompanyBalanceTransaction{})
	companyBalanceTransactionMapping              = queries.MakeStructMapping(companyBalanceTransactionType)
	companyBalanceTransactionPrimaryKeyMapping, _ = queries.BindMapping(companyBalanceTransactionType, companyBalanceTransactionMapping, companyBalanceTransactionPrimaryKeyColumns)
	companyBalanceTransactionInsertCacheMut       sync.RWMutex
	companyBalanceTransactionInsertCache          = make(map[string]insertCache)
	companyBalanceTransactionUpdateCacheMut       sync.RWMutex
	companyBalanceTransactionUpdateCache          = make(map[string]updateCache)
	companyBalanceTransactionUpsertCacheMut       sync.RWMutex
	companyBalanceTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var companyBalanceTransactionAfterSelectHooks []CompanyBalanceTransactionHook

var companyBalanceTransactionBeforeInsertHooks []CompanyBalanceTransactionHook
var companyBalanceTransactionAfterInsertHooks []CompanyBalanceTransactionHook

var companyBalanceTransactionBeforeUpdateHooks []CompanyBalanceTransactionHook
var companyBalanceTransactionAfterUpdateHooks []CompanyBalanceTransactionHook

var companyBalanceTransactionBeforeDeleteHooks []CompanyBalanceTransactionHook
var companyBalanceTransactionAfterDeleteHooks []CompanyBalanceTransactionHook

var companyBalanceTransactionBeforeUpsertHooks []CompanyBalanceTransactionHook
var companyBalanceTransactionAfterUpsertHooks []CompanyBalanceTransactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CompanyBalanceTransaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyBalanceTransactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CompanyBalanceTransaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyBalanceTransactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CompanyBalanceTransaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyBalanceTransactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CompanyBalanceTransaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyBalanceTransactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CompanyBalanceTransaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyBalanceTransactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CompanyBalanceTransaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyBalanceTransactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CompanyBalanceTransaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyBalanceTransactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CompanyBalanceTransaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyBalanceTransactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CompanyBalanceTransaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyBalanceTransactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompanyBalanceTransactionHook registers your hook function for all future operations.
func AddCompanyBalanceTransactionHook(hookPoint boil.HookPoint, companyBalanceTransactionHook CompanyBalanceTransactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		companyBalanceTransactionAfterSelectHooks = append(companyBalanceTransactionAfterSelectHooks, companyBalanceTransactionHook)
	case boil.BeforeInsertHook:
		companyBalanceTransactionBeforeInsertHooks = append(companyBalanceTransactionBeforeInsertHooks, companyBalanceTransactionHook)
	case boil.AfterInsertHook:
		companyBalanceTransactionAfterInsertHooks = append(companyBalanceTransactionAfterInsertHooks, companyBalanceTransactionHook)
	case boil.BeforeUpdateHook:
		companyBalanceTransactionBeforeUpdateHooks = append(companyBalanceTransactionBeforeUpdateHooks, companyBalanceTransactionHook)
	case boil.AfterUpdateHook:
		companyBalanceTransactionAfterUpdateHooks = append(companyBalanceTransactionAfterUpdateHooks, companyBalanceTransactionHook)
	case boil.BeforeDeleteHook:
		companyBalanceTransactionBeforeDeleteHooks = append(companyBalanceTransactionBeforeDeleteHooks, companyBalanceTransactionHook)
	case boil.AfterDeleteHook:
		companyBalanceTransactionAfterDeleteHooks = append(companyBalanceTransactionAfterDeleteHooks, companyBalanceTransactionHook)
	case boil.BeforeUpsertHook:
		companyBalanceTransactionBeforeUpsertHooks = append(companyBalanceTransactionBeforeUpsertHooks, companyBalanceTransactionHook)
	case boil.AfterUpsertHook:
		companyBalanceTransactionAfterUpsertHooks = append(companyBalanceTransactionAfterUpsertHooks, companyBalanceTransactionHook)
	}
}

// One returns a single companyBalanceTransaction record from the query.
func (q companyBalanceTransactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompanyBalanceTransaction, error) {
	o := &CompanyBalanceTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for company_balance_transactions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CompanyBalanceTransaction records from the query.
func (q companyBalanceTransactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompanyBalanceTransactionSlice, error) {
	var o []*CompanyBalanceTransaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CompanyBalanceTransaction slice")
	}

	if len(companyBalanceTransactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CompanyBalanceTransaction records in the query.
func (q companyBalanceTransactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count company_balance_transactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q companyBalanceTransactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if company_balance_transactions exists")
	}

	return count > 0, nil
}

// CompanyBalanceTransactions retrieves all the records using an executor.
func CompanyBalanceTransactions(mods ...qm.QueryMod) companyBalanceTransactionQuery {
	mods = append(mods, qm.From("`company_balance_transactions`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`company_balance_transactions`.*"})
	}

	return companyBalanceTransactionQuery{q}
}

// FindCompanyBalanceTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompanyBalanceTransaction(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CompanyBalanceTransaction, error) {
	companyBalanceTransactionObj := &CompanyBalanceTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `company_balance_transactions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, companyBalanceTransactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from company_balance_transactions")
	}

	if err = companyBalanceTransactionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return companyBalanceTransactionObj, err
	}

	return companyBalanceTransactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompanyBalanceTransaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no company_balance_transactions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companyBalanceTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	companyBalanceTransactionInsertCacheMut.RLock()
	cache, cached := companyBalanceTransactionInsertCache[key]
	companyBalanceTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			companyBalanceTransactionAllColumns,
			companyBalanceTransactionColumnsWithDefault,
			companyBalanceTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(companyBalanceTransactionType, companyBalanceTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(companyBalanceTransactionType, companyBalanceTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `company_balance_transactions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `company_balance_transactions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `company_balance_transactions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, companyBalanceTransactionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into company_balance_transactions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companyBalanceTransactionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for company_balance_transactions")
	}

CacheNoHooks:
	if !cached {
		companyBalanceTransactionInsertCacheMut.Lock()
		companyBalanceTransactionInsertCache[key] = cache
		companyBalanceTransactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CompanyBalanceTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompanyBalanceTransaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	companyBalanceTransactionUpdateCacheMut.RLock()
	cache, cached := companyBalanceTransactionUpdateCache[key]
	companyBalanceTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			companyBalanceTransactionAllColumns,
			companyBalanceTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update company_balance_transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `company_balance_transactions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, companyBalanceTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(companyBalanceTransactionType, companyBalanceTransactionMapping, append(wl, companyBalanceTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update company_balance_transactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for company_balance_transactions")
	}

	if !cached {
		companyBalanceTransactionUpdateCacheMut.Lock()
		companyBalanceTransactionUpdateCache[key] = cache
		companyBalanceTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q companyBalanceTransactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for company_balance_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for company_balance_transactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompanyBalanceTransactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyBalanceTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `company_balance_transactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyBalanceTransactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in companyBalanceTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all companyBalanceTransaction")
	}
	return rowsAff, nil
}

var mySQLCompanyBalanceTransactionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompanyBalanceTransaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no company_balance_transactions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companyBalanceTransactionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCompanyBalanceTransactionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	companyBalanceTransactionUpsertCacheMut.RLock()
	cache, cached := companyBalanceTransactionUpsertCache[key]
	companyBalanceTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			companyBalanceTransactionAllColumns,
			companyBalanceTransactionColumnsWithDefault,
			companyBalanceTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			companyBalanceTransactionAllColumns,
			companyBalanceTransactionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert company_balance_transactions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`company_balance_transactions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `company_balance_transactions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(companyBalanceTransactionType, companyBalanceTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(companyBalanceTransactionType, companyBalanceTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for company_balance_transactions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companyBalanceTransactionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(companyBalanceTransactionType, companyBalanceTransactionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for company_balance_transactions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for company_balance_transactions")
	}

CacheNoHooks:
	if !cached {
		companyBalanceTransactionUpsertCacheMut.Lock()
		companyBalanceTransactionUpsertCache[key] = cache
		companyBalanceTransactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CompanyBalanceTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompanyBalanceTransaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CompanyBalanceTransaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), companyBalanceTransactionPrimaryKeyMapping)
	sql := "DELETE FROM `company_balance_transactions` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from company_balance_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for company_balance_transactions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q companyBalanceTransactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no companyBalanceTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from company_balance_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for company_balance_transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompanyBalanceTransactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(companyBalanceTransactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyBalanceTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `company_balance_transactions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyBalanceTransactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from companyBalanceTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for company_balance_transactions")
	}

	if len(companyBalanceTransactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompanyBalanceTransaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompanyBalanceTransaction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompanyBalanceTransactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompanyBalanceTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyBalanceTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `company_balance_transactions`.* FROM `company_balance_transactions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyBalanceTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompanyBalanceTransactionSlice")
	}

	*o = slice

	return nil
}

// CompanyBalanceTransactionExists checks if the CompanyBalanceTransaction row exists.
func CompanyBalanceTransactionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `company_balance_transactions` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if company_balance_transactions exists")
	}

	return exists, nil
}

// Exists checks if the CompanyBalanceTransaction row exists.
func (o *CompanyBalanceTransaction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CompanyBalanceTransactionExists(ctx, exec, o.ID)
}
