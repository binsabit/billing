// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CompanyService is an object representing the database table.
type CompanyService struct {
	ID            int64           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CompanyID     int64           `boil:"company_id" json:"company_id" toml:"company_id" yaml:"company_id"`
	ServiceID     int64           `boil:"service_id" json:"service_id" toml:"service_id" yaml:"service_id"`
	HashCode      null.String     `boil:"hash_code" json:"hash_code,omitempty" toml:"hash_code" yaml:"hash_code,omitempty"`
	EmployeeID    int64           `boil:"employee_id" json:"employee_id" toml:"employee_id" yaml:"employee_id"`
	Amount        decimal.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Discount      decimal.Decimal `boil:"discount" json:"discount" toml:"discount" yaml:"discount"`
	ItemLimit     null.Int        `boil:"item_limit" json:"item_limit,omitempty" toml:"item_limit" yaml:"item_limit,omitempty"`
	EmployeeLimit null.Int        `boil:"employee_limit" json:"employee_limit,omitempty" toml:"employee_limit" yaml:"employee_limit,omitempty"`
	StockLimit    null.Int        `boil:"stock_limit" json:"stock_limit,omitempty" toml:"stock_limit" yaml:"stock_limit,omitempty"`
	ExtraStockID  null.Int64      `boil:"extra_stock_id" json:"extra_stock_id,omitempty" toml:"extra_stock_id" yaml:"extra_stock_id,omitempty"`
	ActivatedAt   null.Time       `boil:"activated_at" json:"activated_at,omitempty" toml:"activated_at" yaml:"activated_at,omitempty"`
	ExpiresAt     null.Time       `boil:"expires_at" json:"expires_at,omitempty" toml:"expires_at" yaml:"expires_at,omitempty"`
	CreatedAt     null.Time       `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *companyServiceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L companyServiceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompanyServiceColumns = struct {
	ID            string
	CompanyID     string
	ServiceID     string
	HashCode      string
	EmployeeID    string
	Amount        string
	Discount      string
	ItemLimit     string
	EmployeeLimit string
	StockLimit    string
	ExtraStockID  string
	ActivatedAt   string
	ExpiresAt     string
	CreatedAt     string
}{
	ID:            "id",
	CompanyID:     "company_id",
	ServiceID:     "service_id",
	HashCode:      "hash_code",
	EmployeeID:    "employee_id",
	Amount:        "amount",
	Discount:      "discount",
	ItemLimit:     "item_limit",
	EmployeeLimit: "employee_limit",
	StockLimit:    "stock_limit",
	ExtraStockID:  "extra_stock_id",
	ActivatedAt:   "activated_at",
	ExpiresAt:     "expires_at",
	CreatedAt:     "created_at",
}

var CompanyServiceTableColumns = struct {
	ID            string
	CompanyID     string
	ServiceID     string
	HashCode      string
	EmployeeID    string
	Amount        string
	Discount      string
	ItemLimit     string
	EmployeeLimit string
	StockLimit    string
	ExtraStockID  string
	ActivatedAt   string
	ExpiresAt     string
	CreatedAt     string
}{
	ID:            "company_services.id",
	CompanyID:     "company_services.company_id",
	ServiceID:     "company_services.service_id",
	HashCode:      "company_services.hash_code",
	EmployeeID:    "company_services.employee_id",
	Amount:        "company_services.amount",
	Discount:      "company_services.discount",
	ItemLimit:     "company_services.item_limit",
	EmployeeLimit: "company_services.employee_limit",
	StockLimit:    "company_services.stock_limit",
	ExtraStockID:  "company_services.extra_stock_id",
	ActivatedAt:   "company_services.activated_at",
	ExpiresAt:     "company_services.expires_at",
	CreatedAt:     "company_services.created_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CompanyServiceWhere = struct {
	ID            whereHelperint64
	CompanyID     whereHelperint64
	ServiceID     whereHelperint64
	HashCode      whereHelpernull_String
	EmployeeID    whereHelperint64
	Amount        whereHelperdecimal_Decimal
	Discount      whereHelperdecimal_Decimal
	ItemLimit     whereHelpernull_Int
	EmployeeLimit whereHelpernull_Int
	StockLimit    whereHelpernull_Int
	ExtraStockID  whereHelpernull_Int64
	ActivatedAt   whereHelpernull_Time
	ExpiresAt     whereHelpernull_Time
	CreatedAt     whereHelpernull_Time
}{
	ID:            whereHelperint64{field: "`company_services`.`id`"},
	CompanyID:     whereHelperint64{field: "`company_services`.`company_id`"},
	ServiceID:     whereHelperint64{field: "`company_services`.`service_id`"},
	HashCode:      whereHelpernull_String{field: "`company_services`.`hash_code`"},
	EmployeeID:    whereHelperint64{field: "`company_services`.`employee_id`"},
	Amount:        whereHelperdecimal_Decimal{field: "`company_services`.`amount`"},
	Discount:      whereHelperdecimal_Decimal{field: "`company_services`.`discount`"},
	ItemLimit:     whereHelpernull_Int{field: "`company_services`.`item_limit`"},
	EmployeeLimit: whereHelpernull_Int{field: "`company_services`.`employee_limit`"},
	StockLimit:    whereHelpernull_Int{field: "`company_services`.`stock_limit`"},
	ExtraStockID:  whereHelpernull_Int64{field: "`company_services`.`extra_stock_id`"},
	ActivatedAt:   whereHelpernull_Time{field: "`company_services`.`activated_at`"},
	ExpiresAt:     whereHelpernull_Time{field: "`company_services`.`expires_at`"},
	CreatedAt:     whereHelpernull_Time{field: "`company_services`.`created_at`"},
}

// CompanyServiceRels is where relationship names are stored.
var CompanyServiceRels = struct {
	Service string
}{
	Service: "Service",
}

// companyServiceR is where relationships are stored.
type companyServiceR struct {
	Service *Service `boil:"Service" json:"Service" toml:"Service" yaml:"Service"`
}

// NewStruct creates a new relationship struct
func (*companyServiceR) NewStruct() *companyServiceR {
	return &companyServiceR{}
}

func (r *companyServiceR) GetService() *Service {
	if r == nil {
		return nil
	}
	return r.Service
}

// companyServiceL is where Load methods for each relationship are stored.
type companyServiceL struct{}

var (
	companyServiceAllColumns            = []string{"id", "company_id", "service_id", "hash_code", "employee_id", "amount", "discount", "item_limit", "employee_limit", "stock_limit", "extra_stock_id", "activated_at", "expires_at", "created_at"}
	companyServiceColumnsWithoutDefault = []string{"company_id", "service_id", "hash_code", "employee_id", "item_limit", "employee_limit", "stock_limit", "extra_stock_id", "activated_at", "expires_at", "created_at"}
	companyServiceColumnsWithDefault    = []string{"id", "amount", "discount"}
	companyServicePrimaryKeyColumns     = []string{"id"}
	companyServiceGeneratedColumns      = []string{}
)

type (
	// CompanyServiceSlice is an alias for a slice of pointers to CompanyService.
	// This should almost always be used instead of []CompanyService.
	CompanyServiceSlice []*CompanyService
	// CompanyServiceHook is the signature for custom CompanyService hook methods
	CompanyServiceHook func(context.Context, boil.ContextExecutor, *CompanyService) error

	companyServiceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	companyServiceType                 = reflect.TypeOf(&CompanyService{})
	companyServiceMapping              = queries.MakeStructMapping(companyServiceType)
	companyServicePrimaryKeyMapping, _ = queries.BindMapping(companyServiceType, companyServiceMapping, companyServicePrimaryKeyColumns)
	companyServiceInsertCacheMut       sync.RWMutex
	companyServiceInsertCache          = make(map[string]insertCache)
	companyServiceUpdateCacheMut       sync.RWMutex
	companyServiceUpdateCache          = make(map[string]updateCache)
	companyServiceUpsertCacheMut       sync.RWMutex
	companyServiceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var companyServiceAfterSelectHooks []CompanyServiceHook

var companyServiceBeforeInsertHooks []CompanyServiceHook
var companyServiceAfterInsertHooks []CompanyServiceHook

var companyServiceBeforeUpdateHooks []CompanyServiceHook
var companyServiceAfterUpdateHooks []CompanyServiceHook

var companyServiceBeforeDeleteHooks []CompanyServiceHook
var companyServiceAfterDeleteHooks []CompanyServiceHook

var companyServiceBeforeUpsertHooks []CompanyServiceHook
var companyServiceAfterUpsertHooks []CompanyServiceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CompanyService) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyServiceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CompanyService) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyServiceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CompanyService) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyServiceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CompanyService) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyServiceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CompanyService) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyServiceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CompanyService) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyServiceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CompanyService) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyServiceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CompanyService) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyServiceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CompanyService) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range companyServiceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCompanyServiceHook registers your hook function for all future operations.
func AddCompanyServiceHook(hookPoint boil.HookPoint, companyServiceHook CompanyServiceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		companyServiceAfterSelectHooks = append(companyServiceAfterSelectHooks, companyServiceHook)
	case boil.BeforeInsertHook:
		companyServiceBeforeInsertHooks = append(companyServiceBeforeInsertHooks, companyServiceHook)
	case boil.AfterInsertHook:
		companyServiceAfterInsertHooks = append(companyServiceAfterInsertHooks, companyServiceHook)
	case boil.BeforeUpdateHook:
		companyServiceBeforeUpdateHooks = append(companyServiceBeforeUpdateHooks, companyServiceHook)
	case boil.AfterUpdateHook:
		companyServiceAfterUpdateHooks = append(companyServiceAfterUpdateHooks, companyServiceHook)
	case boil.BeforeDeleteHook:
		companyServiceBeforeDeleteHooks = append(companyServiceBeforeDeleteHooks, companyServiceHook)
	case boil.AfterDeleteHook:
		companyServiceAfterDeleteHooks = append(companyServiceAfterDeleteHooks, companyServiceHook)
	case boil.BeforeUpsertHook:
		companyServiceBeforeUpsertHooks = append(companyServiceBeforeUpsertHooks, companyServiceHook)
	case boil.AfterUpsertHook:
		companyServiceAfterUpsertHooks = append(companyServiceAfterUpsertHooks, companyServiceHook)
	}
}

// One returns a single companyService record from the query.
func (q companyServiceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompanyService, error) {
	o := &CompanyService{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for company_services")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CompanyService records from the query.
func (q companyServiceQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompanyServiceSlice, error) {
	var o []*CompanyService

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CompanyService slice")
	}

	if len(companyServiceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CompanyService records in the query.
func (q companyServiceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count company_services rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q companyServiceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if company_services exists")
	}

	return count > 0, nil
}

// Service pointed to by the foreign key.
func (o *CompanyService) Service(mods ...qm.QueryMod) serviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ServiceID),
	}

	queryMods = append(queryMods, mods...)

	return Services(queryMods...)
}

// LoadService allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyServiceL) LoadService(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompanyService interface{}, mods queries.Applicator) error {
	var slice []*CompanyService
	var object *CompanyService

	if singular {
		var ok bool
		object, ok = maybeCompanyService.(*CompanyService)
		if !ok {
			object = new(CompanyService)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompanyService)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompanyService))
			}
		}
	} else {
		s, ok := maybeCompanyService.(*[]*CompanyService)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompanyService)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompanyService))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyServiceR{}
		}
		args = append(args, object.ServiceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyServiceR{}
			}

			for _, a := range args {
				if a == obj.ServiceID {
					continue Outer
				}
			}

			args = append(args, obj.ServiceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`services`),
		qm.WhereIn(`services.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Service")
	}

	var resultSlice []*Service
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Service")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for services")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for services")
	}

	if len(serviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Service = foreign
		if foreign.R == nil {
			foreign.R = &serviceR{}
		}
		foreign.R.CompanyServices = append(foreign.R.CompanyServices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ServiceID == foreign.ID {
				local.R.Service = foreign
				if foreign.R == nil {
					foreign.R = &serviceR{}
				}
				foreign.R.CompanyServices = append(foreign.R.CompanyServices, local)
				break
			}
		}
	}

	return nil
}

// SetService of the companyService to the related item.
// Sets o.R.Service to related.
// Adds o to related.R.CompanyServices.
func (o *CompanyService) SetService(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Service) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `company_services` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"service_id"}),
		strmangle.WhereClause("`", "`", 0, companyServicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ServiceID = related.ID
	if o.R == nil {
		o.R = &companyServiceR{
			Service: related,
		}
	} else {
		o.R.Service = related
	}

	if related.R == nil {
		related.R = &serviceR{
			CompanyServices: CompanyServiceSlice{o},
		}
	} else {
		related.R.CompanyServices = append(related.R.CompanyServices, o)
	}

	return nil
}

// CompanyServices retrieves all the records using an executor.
func CompanyServices(mods ...qm.QueryMod) companyServiceQuery {
	mods = append(mods, qm.From("`company_services`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`company_services`.*"})
	}

	return companyServiceQuery{q}
}

// FindCompanyService retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompanyService(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CompanyService, error) {
	companyServiceObj := &CompanyService{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `company_services` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, companyServiceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from company_services")
	}

	if err = companyServiceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return companyServiceObj, err
	}

	return companyServiceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompanyService) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no company_services provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companyServiceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	companyServiceInsertCacheMut.RLock()
	cache, cached := companyServiceInsertCache[key]
	companyServiceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			companyServiceAllColumns,
			companyServiceColumnsWithDefault,
			companyServiceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(companyServiceType, companyServiceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(companyServiceType, companyServiceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `company_services` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `company_services` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `company_services` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, companyServicePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into company_services")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companyServiceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for company_services")
	}

CacheNoHooks:
	if !cached {
		companyServiceInsertCacheMut.Lock()
		companyServiceInsertCache[key] = cache
		companyServiceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CompanyService.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompanyService) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	companyServiceUpdateCacheMut.RLock()
	cache, cached := companyServiceUpdateCache[key]
	companyServiceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			companyServiceAllColumns,
			companyServicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update company_services, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `company_services` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, companyServicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(companyServiceType, companyServiceMapping, append(wl, companyServicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update company_services row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for company_services")
	}

	if !cached {
		companyServiceUpdateCacheMut.Lock()
		companyServiceUpdateCache[key] = cache
		companyServiceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q companyServiceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for company_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for company_services")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompanyServiceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `company_services` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyServicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in companyService slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all companyService")
	}
	return rowsAff, nil
}

var mySQLCompanyServiceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompanyService) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no company_services provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(companyServiceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCompanyServiceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	companyServiceUpsertCacheMut.RLock()
	cache, cached := companyServiceUpsertCache[key]
	companyServiceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			companyServiceAllColumns,
			companyServiceColumnsWithDefault,
			companyServiceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			companyServiceAllColumns,
			companyServicePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert company_services, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`company_services`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `company_services` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(companyServiceType, companyServiceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(companyServiceType, companyServiceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for company_services")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == companyServiceMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(companyServiceType, companyServiceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for company_services")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for company_services")
	}

CacheNoHooks:
	if !cached {
		companyServiceUpsertCacheMut.Lock()
		companyServiceUpsertCache[key] = cache
		companyServiceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CompanyService record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompanyService) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CompanyService provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), companyServicePrimaryKeyMapping)
	sql := "DELETE FROM `company_services` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from company_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for company_services")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q companyServiceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no companyServiceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from company_services")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for company_services")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompanyServiceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(companyServiceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `company_services` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyServicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from companyService slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for company_services")
	}

	if len(companyServiceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompanyService) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompanyService(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompanyServiceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompanyServiceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyServicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `company_services`.* FROM `company_services` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, companyServicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompanyServiceSlice")
	}

	*o = slice

	return nil
}

// CompanyServiceExists checks if the CompanyService row exists.
func CompanyServiceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `company_services` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if company_services exists")
	}

	return exists, nil
}

// Exists checks if the CompanyService row exists.
func (o *CompanyService) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CompanyServiceExists(ctx, exec, o.ID)
}
